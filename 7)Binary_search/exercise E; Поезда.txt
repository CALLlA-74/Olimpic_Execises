#include <fstream>
#include <math.h>
using namespace std;

int L, N, sumT = 0;
int* t, *v;
const long double eps = 1e-7;

bool check(long double x) {
    if (x < 0 || x > sumT) return false;
    long double tmp1, tmp2 = 0;
    long double interval = 0, s1, s2;
    int i, j = 0;
    for (i = 0; i < N; i++)                                             // чекаем сколько успел пройти первый поезд за время х
        if (x >= t[i]) x -= t[i], interval += (t[i] * v[i]);
        else {
            interval += (v[i] * x);
            break;
        }
    if (interval < L) return false;
    s2 = 0, s1 = interval, tmp1 = x;
    while (i < N && j < N) {                                            // вычисляем расстояения для первого и второго поездов (s1 и s2 соответственно)
        if (t[i] - tmp1 > t[j] - tmp2) {                                // вычисляем так: чекаем время до ближайшей контрольной точки:
            s1 += ((t[j] - tmp2) * v[i]);                               // умножаем наименьшее время на скорость движения поезда на заданном промежутке для
            s2 += ((t[j] - tmp2) * v[j]);                               // обоих поездов
            tmp1 += (t[j] - tmp2);
            tmp2 = 0, j++;
        }
        else if (t[i] - tmp1 < t[j] - tmp2) {
            s1 += ((t[i] - tmp1) * v[i]);
            s2 += ((t[i] - tmp1) * v[j]);
            tmp2 += (t[i] - tmp1);
            tmp1 = 0, i++;
        }
        else {
            s1 += ((t[i] - tmp1) * v[i]);
            s2 += ((t[i] - tmp1) * v[j]);
            tmp2 = 0, tmp1 = 0, i++, j++;
        }
        if (abs(s1 - s2) < L) return false;                             // и чекаем, что разность расстояний более или равна L
    }
    return true;
}

long double bin_search(long double left = -1e-7, long double right = sumT + 1e-7) {
    if (fabs(right - left) <= eps) return right;
    long double mid = (right + left) / 2;
    if (check(mid)) right = mid;
    else left = mid;

    return bin_search(left, right);
}

int main() {
    ifstream in("trains.in");
    in >> L >> N;
    t = new int[N];
    v = new int[N];
    for (int i = 0; i < N; i++) in >> t[i] >> v[i], sumT += t[i];
    in.close();
    ofstream out("trains.out");
    out << fixed;
    out.precision(4);
    out << bin_search();
    out.close();
    return 0;
}